# Simulation settings for using moveit_sim_controllers
moveit_sim_hw_interface:
  joint_model_group: arm
  joint_model_group_pose: default_pose
# Settings for ros_control_boilerplate control loop
generic_hw_control_loop:
  loop_hz: 300
  cycle_time_error_threshold: 0.01
# Settings for ros_control hardware interface
hardware_interface:
  joints:
    - j_ant_pan
    - j_ant_tilt
    - j_shou_yaw
    - j_shou_pitch
    - j_prox_pitch
    - j_dist_pitch
    - j_hand_yaw
    - j_grinder
    - j_scoop_yaw
  sim_control_mode: 1  # 0: position, 1: velocity
# Publish all joint states
# Creates the /joint_states topic necessary in ROS
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50
controller_list:
  - name: antenna_controller
    action_ns: follow_joint_trajectory
    type: FollowJointTrajectory
    default: true
    joints:
      - j_ant_pan
      - j_ant_tilt
  - name: arm_controller
    action_ns: follow_joint_trajectory
    type: FollowJointTrajectory
    default: true
    joints:
      - j_shou_yaw
      - j_shou_pitch
      - j_prox_pitch
      - j_dist_pitch
      - j_hand_yaw
      - j_scoop_yaw
  # TODO: We probably need to move the grinder_controller to another file to
  # ease the process of controller switching
  # - name: grinder_controller
  #   action_ns: follow_joint_trajectory
  #   type: FollowJointTrajectory
  #   joints:
  #     - j_shou_yaw
  #     - j_shou_pitch
  #     - j_prox_pitch
  #     - j_dist_pitch
  #     - j_hand_yaw
  #     - j_grinder
antenna_controller:
  type: effort_controllers/JointTrajectoryController
  joints:
    - j_ant_pan
    - j_ant_tilt
  gains:
    j_ant_pan:
      p: 100
      d: 1
      i: 1
      i_clamp: 1
    j_ant_tilt:
      p: 100
      d: 1
      i: 1
      i_clamp: 1
arm_controller:
  type: effort_controllers/JointTrajectoryController
  joints:
    - j_shou_yaw
    - j_shou_pitch
    - j_prox_pitch
    - j_dist_pitch
    - j_hand_yaw
    - j_scoop_yaw
  constraints:
    # If the timestamp of the goal trajectory point is t, then following the trajectory 
    # succeeds if it reaches the goal within t +/- goal_time, and aborts otherwise.
    goal_time: 50.0 
    # Velocity to be considered approximately equal to zero.
    stopped_velocity_tolerance: 0.001
    # Position tolerance for a particular joint to reach the goal and throughout the trajectory
    j_shou_yaw: {trajectory: &traj_tolerance 0.5, goal: &goal_tolerance 0.1}
    j_shou_pitch: {trajectory: *traj_tolerance, goal: *goal_tolerance}
    j_prox_pitch: {trajectory: *traj_tolerance, goal: *goal_tolerance}
    j_dist_pitch: {trajectory: *traj_tolerance, goal: *goal_tolerance}
    j_hand_yaw: {trajectory: *traj_tolerance, goal: *goal_tolerance}
    j_scoop_yaw: {trajectory: *traj_tolerance, goal: *goal_tolerance}
  # Time it takes to bring the current state (position and velocity) to a stop
  stop_trajectory_duration: 1.0
  gains:
    j_shou_yaw: 
      p: 1000.0
      d: 300.0
      i: 10.0
      i_clamp: &ki_clamp_default 2
    j_shou_pitch:
      p: 2000.0
      d: 150.0
      i: 0.2
      i_clamp: *ki_clamp_default
    j_prox_pitch:
      p: 1100.0
      d: 100.0
      i: 2.0
      i_clamp: 1
    j_dist_pitch:
      p: 700.0
      d: 20.0
      i: 0.06
      i_clamp: 1
    j_hand_yaw:
      p: 100.0
      d: 10.0
      i: 0.01
      i_clamp: 1
    j_scoop_yaw:
      p: 100.0
      d: 10.0
      i: 0.01
      i_clamp: 1
  

# TODO: Same as above .. We may need to move the grinder_controller to another file to
# ease the process of controller switching
# grinder_controller:
#   type: effort_controllers/JointTrajectoryController
#   joints:
#     - j_shou_yaw
#     - j_shou_pitch
#     - j_prox_pitch
#     - j_dist_pitch
#     - j_hand_yaw
#     - j_grinder
#   gains:
#     j_shou_yaw:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1
#     j_shou_pitch:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1
#     j_prox_pitch:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1
#     j_dist_pitch:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1
#     j_hand_yaw:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1
#     j_grinder:
#       p: 100
#       d: 1
#       i: 1
#       i_clamp: 1