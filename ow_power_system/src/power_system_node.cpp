// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// OW power system ROS node - publishes values from a csv generated by the matlab
// battery model as a placeholder for once battery models are linked.


#include <chrono>

#include <ros/ros.h>
#include <ros/package.h>
#include <ros/console.h>
#include <std_msgs/Float64.h>

#include "power_system_util.h"

using namespace std;


// This example sets up a simple synchronos prognoser to predict battery end of
// discharge using a Monte Carlo predictor and an Unscented Kalman Filter.
int simple_example() {
    using namespace std::chrono;
    // Read battery data from a file.
    auto data = read_file("data_const_load.csv");

    // Create a configuration from a file
    ConfigMap config("example.cfg");

    // Contruct a new prognoser using the prognoser factory. The prognoser
    // will automatically construct an appropriate model, observer and predictor
    // based on the values specified in the config.
    auto prognoser = PrognoserFactory::instance().Create("ModelBasedPrognoser", config);

    // For each line of data in the example file, run a single prediction step.
    for (const auto& line : data) {
        // Get a new prediction
        auto prediction = prognoser->step(line);

        // Get the event for battery EoD. The first line of data is used to initialize the observer,
        // so the first prediction won't have any events.
        if (prediction.getEvents().size() == 0) {
            continue;
        }
        auto eod_event = prediction.getEvents().front();

        // The time of event is a `UData` structure, which represents a data
        // point while maintaining uncertainty. For the MonteCarlo predictor
        // used by this example, the uncertainty is captured by storing the
        // result of each particle used in the prediction.
        UData eod_time = eod_event.getTOE();
        if (eod_time.uncertainty() != UType::Samples) {
            std::cerr << "Unexpected uncertainty type for EoD prediction" << std::endl;
            return 1;
        }

        // For this example, we will print the median EoD.
        auto samples = eod_time.getVec();
        std::sort(samples.begin(), samples.end());
        double eod_median = samples.at(samples.size() / 2);
        auto now =  MessageClock::now();
        auto now_s = duration_cast<std::chrono::seconds>(now.time_since_epoch());
        std::cout << "Predicted median EoD: " << eod_median << " s (T- "
                  << (eod_median-now_s.count())<< " s)" << std::endl;
    }

    return 0;
}

int main(int argc, char* argv[]) {
  
  ros::init(argc,argv,"power_system_node");
  ros::NodeHandle nh ("power_system_node");

  //Construct our State of Charge (SOC) publisher (Volts)
  ros::Publisher SOC_pub = nh.advertise<std_msgs::Float64>("state_of_charge",1000);
  //Construct our Remaining Useful Life (RUL) publisher (Seconds)
  ros::Publisher RUL_pub = nh.advertise<std_msgs::Float64>("remaining_useful_life",1000);
  
  //Load power values csv
  string csv_path;
  auto csv_path_param_exist = nh.param("power_draw_csv_path", csv_path,
    ros::package::getPath("ow_power_system") + "/data/onewatt.csv");

  if (!csv_path_param_exist)
  {
    ROS_WARN_NAMED("power_system_node", "power_draw_csv_path param was not set! Using default value: onewatt.csv");
  }

  ROS_INFO_STREAM_NAMED("power_system_node", "power_draw_csv_path is set to: " << csv_path);

  auto power_csv = load_csv(csv_path);

  // Retrieve our publication rate expressed in Hz
  double power_update_rate = csv_path.find("onewatt") != string::npos ? 0.1 : 1;  // if onewatt default to 0.1 Hz otherwise 1 Hz
  double power_update_rate_override;  // allow the user to override it
  auto update_rate_param_exist = nh.param("power_update_rate", power_update_rate_override, 0.1);

  if (update_rate_param_exist)
  {
    ROS_WARN_NAMED("power_system_node", "Overriding the default power_update_rate!");
    // Validated the parameter
    if (power_update_rate == 0)
    {
      ROS_ERROR_NAMED("power_system_node", "power_update_rate param was set to zero! passed value ignored.");
    }
    else
    {
      power_update_rate = power_update_rate_override;
    }
  }

  ROS_INFO_STREAM_NAMED("power_system_node", "power_update_rate is set to: " << power_update_rate << " Hz");
  
  // Initialize time step to 0
  int t_step = 0;

  //set our indices
  int time_i = 0;
  int voltage_i = 1;
  int rul_i = 2;
  
  // ROS Loop. Note that once this loop starts,
  // this function (and node) is terminated with an interrupt.
  
  ros::Rate rate(power_update_rate);
  //individual soc_msg to be published by SOC_pub
  std_msgs::Float64 soc_msg;
  std_msgs::Float64 rul_msg;
  ROS_INFO ("Power system node running");

  int power_lifetime = power_csv.size();
  while (ros::ok()) {
    if (t_step < power_lifetime) {
      soc_msg.data=power_csv[t_step][voltage_i];
      rul_msg.data=power_csv[t_step][rul_i];
    } //publishes last voltage value if sim time exceeds the length of the csv

    //publish current SOC
    SOC_pub.publish(soc_msg);
    RUL_pub.publish(rul_msg);
    t_step+=1;
    
    ros::spinOnce();
    rate.sleep();
   
  }

  return 0;
}