// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// OW power system ROS node - publishes values from a csv generated by the matlab
// battery model as a placeholder for once battery models are linked.

#include <ros/ros.h>
#include <ros/package.h>
#include <ros/console.h>
#include <std_msgs/Float64.h>
//CSV handling
#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;
vector<vector<double>> loadCSV(const std::string& filename);

int main(int argc, char* argv[]) {
  
  ros::init(argc,argv,"power_system_node");
  ros::NodeHandle n ("power_system_node");

  //Construct our State of Charge (SOC) publisher (Volts)
  ros::Publisher SOC_pub = n.advertise<std_msgs::Float64>("state_of_charge",1000);
  //Construct our Remaining Useful Life (RUL) publisher (Seconds)
  ros::Publisher RUL_pub = n.advertise<std_msgs::Float64>("remaining_useful_life",1000);
  
  //Load power values csv
  string csv_path;
  auto csv_path_param_exist = n.param("power_draw_csv_path", csv_path,
    ros::package::getPath("ow_power_system") + "/data/onewatt.csv");

  if (!csv_path_param_exist)
  {
    ROS_WARN_NAMED("power_system_node", "power_draw_csv_path param was not set! Using default value: onewatt.csv");
  }

  ROS_INFO_STREAM_NAMED("power_system_node", "power_draw_csv_path is set to: " << csv_path);

  auto power_csv = loadCSV(csv_path);

  // Retrieve our publication rate expressed in Hz
  double power_update_rate = csv_path.find("onewatt") != string::npos ? 0.1 : 1;  // if onewatt default to 0.1 Hz otherwise 1 Hz
  double power_update_rate_override;  // allow the user to override it
  auto update_rate_param_exist = n.param("power_update_rate", power_update_rate_override, 0.1);

  if (update_rate_param_exist)
  {
    ROS_WARN_NAMED("power_system_node", "Overriding the default power_update_rate!");
    // Validated the parameter
    if (power_update_rate == 0)
    {
      ROS_ERROR_NAMED("power_system_node", "power_update_rate param was set to zero! passed value ignored.");
    }
    else
    {
      power_update_rate = power_update_rate_override;
    }
  }

  ROS_INFO_STREAM_NAMED("power_system_node", "power_update_rate is set to: " << power_update_rate << " Hz");
  
  // Initialize time step to 0
  int t_step = 0;

  //set our indices
  int time_i = 0;
  int voltage_i = 1;
  int rul_i = 2;
  
  // ROS Loop. Note that once this loop starts,
  // this function (and node) is terminated with an interrupt.
  
  ros::Rate rate(power_update_rate);
  //individual soc_msg to be published by SOC_pub
  std_msgs::Float64 soc_msg;
  std_msgs::Float64 rul_msg;
  ROS_INFO ("Power system node running");

  int power_lifetime = power_csv.size();
  while (ros::ok()) {
    if (t_step < power_lifetime) {
      soc_msg.data=power_csv[t_step][voltage_i];
      rul_msg.data=power_csv[t_step][rul_i];
    } //publishes last voltage value if sim time exceeds the length of the csv

    //publish current SOC
    SOC_pub.publish(soc_msg);
    RUL_pub.publish(rul_msg);
    t_step+=1;
    
    ros::spinOnce();
    rate.sleep();
   
  }

  return 0;
}


/* Function to load pre-generated values as a vector of vectors of doubles
 * Returns std::vector<std::vector<std::double>>
 */
vector<vector<double>> loadCSV(const std::string& filename){
  ifstream power_csv(filename);
  if (power_csv.fail()) {
    ROS_WARN("Loading power csv file has failed. power_system_node will publish zeros.");
    vector<double> zero_row = {0.0,0.0,0.0};
    vector<vector<double>> zeros;
    zeros.push_back(zero_row);
    return zeros;
  }
  vector<vector<double>> values;

  int numColumns = 3;
  //timestamp, voltage, rul for ####watt.csv
  //timestamp, voltage, current for 1HzVoltageProfile.csv
  
  string line,value_string;
  
  double myval;
  vector<double> vec_row;

  //clear first line (header)
  if (power_csv.good()){
    getline(power_csv,line);
  }
  
  // Iterate and grab the values that we want
  while(power_csv.good()){
    vec_row.clear();
    getline(power_csv,line);
    if (line.empty()) {
      continue;
    }
    stringstream line_stream(line);
    //get values out of row, put them in my vector row
    for (int i=0; i < numColumns; i++) {
      getline(line_stream,value_string,',');
      myval = stod(value_string);
      vec_row.push_back(myval);
	
    }
    values.push_back(vec_row);
  }

  power_csv.close();
  ROS_DEBUG("Power csv loaded successfully");
  return values;
}

